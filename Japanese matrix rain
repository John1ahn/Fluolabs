#matrix rain
from stream import Stream

symbolSize = 20
streams = []
def setup():
    global strm, pause
    size(800, 800)
    
    msfont = loadFont("data/MS-Gothic-48.vlw")
    textFont(msfont, symbolSize)
    
    x = 0
    i = 0
    while(i <= (width / symbolSize)):
        st = Stream(symbolSize)
        st.makeSymbols(x, random(-2000, 0));
        streams.append(st);
        x += symbolSize
        i += 1
    pause = False
def draw():
    global pause
    background(0)
    for i in range(len(streams)):
        streams[i].display(pause)
#stream.py
from symbol import Symbol

class Stream():
    def __init__(self, symbolSize):
        self.symbols = []
        self.totalSymbols = int(random(5, 25))
        self.speed = int(random(5, 20))
        self.symbolSize = symbolSize
        print(self.totalSymbols)
    def makeSymbols(self, x, y):

        for i in range(self.totalSymbols):
            sym = Symbol(x, y, self.speed)
            sym.setRandomSymbol()
            self.symbols.append(sym)
            y = y - self.symbolSize
            
    def display(self, pause):
        for i in range(self.totalSymbols):
            sym = self.symbols[i]
            if (i == 0):
                fill(random(255))
            else:
                fill(random(0), random(255), random(70))
            text(sym.value, sym.x, sym.y)
            if (pause == False):
                sym.update()
            # sym.setRandomSymbol()    
#symbol.py   
class Symbol():
    def __init__(self, x, y, speed):
        self.x = x
        self.y = y
        self.speed = speed
        self.value = unichr(0x30A0 + round(random(0, 66)))
        self.switchInterval = int(random(2, 5))
        
    def setRandomSymbol(self):
        self.value = unichr(0x30A0 + round(random(0, 66)))
        
    def display(self):
        fill(random(0), random(255), random(100))
        text(self.value, self.x, self.y)
        
    def update(self):
        if (frameCount % 5 == 0):
            self.setRandomSymbol()
        if (self.y >= height):
            self.y = 0
        else:
            self.y += self.speed
            
